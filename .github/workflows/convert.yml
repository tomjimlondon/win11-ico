name: Convert to ICO
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'svg/**'
jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout SVG Repo
        uses: actions/checkout@v3
        with:
          repository: icon11-community/Folder11
          path: Folder11
          fetch-depth: 0

      - name: Checkout ICO Repo
        uses: actions/checkout@v3
        with:
          repository: icon11-community/Folder11-Ico
          token: ${{ secrets.ACTION_TOKEN }}
          path: Folder11-Ico

      - name: Setup Dependencies
        run: |
          sudo apt-get install -y imagemagick jq
          npm install -g svgexport

      - name: Convert SVG to ICO
        id: convert_svg
        run: |
          SVG_DIR="./Folder11/svg"
          ICO_DIR="./Folder11-Ico/ico"
          HASH_DIR="./Folder11-Ico/hash"
          TEMP_DIR=$(mktemp -d)

          echo "SVG_DIR: $SVG_DIR"
          echo "ICO_DIR: $ICO_DIR"
          echo "HASH_DIR: $HASH_DIR"
          echo "TEMP_DIR: $TEMP_DIR"

          mkdir -p "$ICO_DIR" "$HASH_DIR"
          echo "Directories created"

          for svg_file in "$SVG_DIR"/*.svg; do
            [ -f "$svg_file" ] || continue

            filename=$(basename -- "$svg_file")
            name="${filename%.*}"

            current_hash=$(git hash-object "$svg_file")
            hash_file="$HASH_DIR/$name.hash"

            if [ -f "$hash_file" ] && [ -f "$ICO_DIR/$name.ico" ] && [ "$current_hash" == "$(cat "$hash_file")" ]; then
              echo "ðŸŸ¢ No changes for: $name"
              continue
            fi

            echo "ðŸ”µ Converting: $name"

            temp_png="$TEMP_DIR/$name.png"
            ico_output="$ICO_DIR/$name.ico"

            svgexport "$svg_file" "$temp_png" png 1024:1024

            convert -background transparent "$temp_png" \
              -define icon:auto-resize="256,128,96,64,48,32,16" \
              "$ico_output"

            echo "$current_hash" > "$hash_file"
          done

          for ico_file in "$ICO_DIR"/*.ico; do
            [ -f "$ico_file" ] || continue

            filename=$(basename -- "$ico_file")
            name="${filename%.*}"
            svg_file="$SVG_DIR/$name.svg"

            if [ ! -f "$svg_file" ]; then
              echo "ðŸ”´ Removing orphaned: $name"
              rm -f "$ico_file"
              rm -f "$HASH_DIR/$name.hash"
            fi
          done

          rm -rf "$TEMP_DIR"

          echo "hash=$current_hash" >> $GITHUB_ENV

      - name: Generate icon.json
        run: |
          ICO_DIR="./Folder11-Ico/ico"
          HASH_DIR="./Folder11-Ico/hash"
          JSON_FILE="./Folder11-Ico/icon.json"

          json_content=$(
            jq -n --argjson icons '[]' '
              {
                "icons": $icons
              }
            '
          )

          for ico_file in "$ICO_DIR"/*.ico; do
            [ -f "$ico_file" ] || continue

            filename=$(basename -- "$ico_file")
            name="${filename%.*}"
            size=$(stat -c%s "$ico_file")
            url_icon="https://raw.githubusercontent.com/icon11-community/Folder11-Ico/main/ico/$filename"
            hash=$(cat "$HASH_DIR/$name.hash")
            
            svg_file_path="svg/$name.svg"
            date=$(git -C ./Folder11 log -1 --format=%cd --date=iso-strict -- "$svg_file_path")

            json_content=$(
              echo "$json_content" | jq --arg name "$name" --arg size "$size" --arg url_icon "$url_icon" --arg hash "$hash" --arg date "$date" '
                .icons += [
                  {
                    "name": $name,
                    "size": $size,
                    "url_icon": $url_icon,
                    "hash": $hash,
                    "date": $date
                  }
                ]
              '
            )
          done

          echo "$json_content" | jq . > "$JSON_FILE"

      - name: Commit and Push Changes
        run: |
          cd Folder11-Ico
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "gen: ${{ env.hash }}"
            git push
          else
            echo "No changes to commit"
          fi
